
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Eye, MessageSquare, Clock, CheckCircle, AlertCircle } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface Response {
  id: string;
  recipient_email: string;
  status: string;
  started_at: string | null;
  completed_at: string | null;
  conversation: any;
}

interface BriefResponsesViewProps {
  briefId: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function BriefResponsesView({ briefId, open, onOpenChange }: BriefResponsesViewProps) {
  const [responses, setResponses] = useState<Response[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedResponse, setSelectedResponse] = useState<Response | null>(null);
  const [chatDialogOpen, setChatDialogOpen] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (open && briefId) {
      fetchResponses();
    }
  }, [open, briefId]);

  const fetchResponses = async () => {
    try {
      const { data, error } = await supabase
        .from('responses')
        .select('*')
        .eq('brief_id', briefId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setResponses(data || []);
    } catch (error) {
      console.error('Error fetching responses:', error);
      toast({
        title: "Error",
        description: "Failed to load responses",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const configs = {
      pending: { label: 'Pending', variant: 'secondary' as const, icon: Clock },
      started: { label: 'In Progress', variant: 'default' as const, icon: MessageSquare },
      completed: { label: 'Completed', variant: 'default' as const, icon: CheckCircle },
    };
    
    const config = configs[status as keyof typeof configs] || { label: status, variant: 'secondary' as const, icon: AlertCircle };
    const Icon = config.icon;
    
    return (
      <Badge variant={config.variant} className="flex items-center gap-1">
        <Icon className="h-3 w-3" />
        {config.label}
      </Badge>
    );
  };

  const viewChatTranscript = (response: Response) => {
    setSelectedResponse(response);
    setChatDialogOpen(true);
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString() + ' ' + new Date(dateString).toLocaleTimeString();
  };

  const generateSummary = () => {
    const completedResponses = responses.filter(r => r.status === 'completed');
    if (completedResponses.length === 0) {
      return "No completed responses yet.";
    }

    return `Summary based on ${completedResponses.length} completed responses. Key themes and insights would be generated by AI analysis of the conversation data.`;
  };

  const generateResponseSummary = (response: Response) => {
    if (response.status !== 'completed' || !response.conversation) {
      return "Response not completed yet.";
    }

    // Extract key points from conversation for summary
    if (Array.isArray(response.conversation) && response.conversation.length > 0) {
      const userMessages = response.conversation.filter((msg: any) => msg.role === 'user');
      if (userMessages.length > 0) {
        const lastMessage = userMessages[userMessages.length - 1];
        return lastMessage.content.substring(0, 150) + (lastMessage.content.length > 150 ? '...' : '');
      }
    }
    
    return "Summary not available.";
  };

  if (loading) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <div className="flex items-center justify-center py-8">
            <div className="text-lg">Loading responses...</div>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <>
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="font-sora">Brief Responses & Summary</DialogTitle>
            <DialogDescription className="font-inter">
              View detailed responses and AI-generated summary
            </DialogDescription>
          </DialogHeader>

          <Tabs defaultValue="summary" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="summary">Final Summary</TabsTrigger>
              <TabsTrigger value="responses">Individual Responses</TabsTrigger>
            </TabsList>
            
            <TabsContent value="summary" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="font-sora flex items-center gap-2">
                    <MessageSquare className="h-5 w-5" />
                    AI-Generated Summary
                  </CardTitle>
                  <CardDescription>
                    Synthesized insights from all completed responses
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="prose prose-sm max-w-none">
                    <p className="text-sm leading-relaxed">{generateSummary()}</p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="responses" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="font-sora">Response Details</CardTitle>
                  <CardDescription>
                    Individual team member responses and summaries
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Recipient</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Sent On</TableHead>
                        <TableHead>Summary of Response</TableHead>
                        <TableHead>View Transcript</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {responses.map((response) => (
                        <TableRow key={response.id}>
                          <TableCell className="font-medium">{response.recipient_email}</TableCell>
                          <TableCell>{getStatusBadge(response.status)}</TableCell>
                          <TableCell className="text-sm">{formatDate(response.started_at)}</TableCell>
                          <TableCell className="max-w-xs">
                            <p className="text-sm text-muted-foreground">
                              {generateResponseSummary(response)}
                            </p>
                          </TableCell>
                          <TableCell>
                            {response.status === 'completed' ? (
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => viewChatTranscript(response)}
                                className="text-xs"
                              >
                                <Eye className="h-3 w-3 mr-1" />
                                View Transcript
                              </Button>
                            ) : (
                              <span className="text-xs text-muted-foreground">Not available</span>
                            )}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                  
                  {responses.length === 0 && (
                    <div className="text-center py-8 text-muted-foreground">
                      No responses found for this brief.
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>

      {/* Chat Transcript Dialog */}
      <Dialog open={chatDialogOpen} onOpenChange={setChatDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="font-sora">Chat Transcript</DialogTitle>
            <DialogDescription className="font-inter">
              Conversation with {selectedResponse?.recipient_email}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {selectedResponse?.conversation && Array.isArray(selectedResponse.conversation) ? (
              selectedResponse.conversation.map((message: any, index: number) => (
                <div
                  key={index}
                  className={`p-3 rounded-lg ${
                    message.role === 'user' 
                      ? 'bg-blue-50 border-l-4 border-blue-500' 
                      : 'bg-gray-50 border-l-4 border-gray-500'
                  }`}
                >
                  <div className="font-medium text-sm text-muted-foreground mb-1">
                    {message.role === 'user' ? 'Team Member' : 'AI Assistant'}
                  </div>
                  <div className="text-sm">{message.content}</div>
                </div>
              ))
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                No conversation data available.
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
